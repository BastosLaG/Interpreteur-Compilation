State 0:
## Known stack suffix:
##
## LR(1) items:
block' -> . block [ # ]
## Transitions:
-- On Lvar shift to state 1
-- On Lreturn shift to state 21
-- On Lend shift to state 24
-- On instr shift to state 25
-- On block shift to state 27
## Reductions:

State 1:
## Known stack suffix:
## Lvar
## LR(1) items:
instr -> Lvar . Lassign expr Lsc [ Lvar Lreturn Lend ]
## Transitions:
-- On Lassign shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## Lvar Lassign
## LR(1) items:
instr -> Lvar Lassign . expr Lsc [ Lvar Lreturn Lend ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 19
## Reductions:

State 3:
## Known stack suffix:
## Lvar
## LR(1) items:
expr -> Lvar . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Lvar

State 4:
## Known stack suffix:
## Ltrue
## LR(1) items:
expr -> Ltrue . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Ltrue

State 5:
## Known stack suffix:
## Lstring
## LR(1) items:
expr -> Lstring . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Lstring

State 6:
## Known stack suffix:
## Lopar
## LR(1) items:
expr -> Lopar . expr Lcpar [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 9
## Reductions:

State 7:
## Known stack suffix:
## Lint
## LR(1) items:
expr -> Lint . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Lint

State 8:
## Known stack suffix:
## Lfalse
## LR(1) items:
expr -> Lfalse . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Lfalse

State 9:
## Known stack suffix:
## Lopar expr
## LR(1) items:
expr -> Lopar expr . Lcpar [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lmul expr [ Lsub Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ladd expr [ Lsub Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lsub expr [ Lsub Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ldiv expr [ Lsub Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lsub shift to state 10
-- On Lmul shift to state 12
-- On Ldiv shift to state 14
-- On Lcpar shift to state 16
-- On Ladd shift to state 17
## Reductions:

State 10:
## Known stack suffix:
## expr Lsub
## LR(1) items:
expr -> expr Lsub . expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## expr Lsub expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr Lsub expr . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lmul shift to state 12
-- On Ldiv shift to state 14
## Reductions:
-- On Lsub Lsc Lcpar Ladd
--   reduce production expr -> expr Lsub expr

State 12:
## Known stack suffix:
## expr Lmul
## LR(1) items:
expr -> expr Lmul . expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## expr Lmul expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr Lmul expr . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> expr Lmul expr

State 14:
## Known stack suffix:
## expr Ldiv
## LR(1) items:
expr -> expr Ldiv . expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## expr Ldiv expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr Ldiv expr . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> expr Ldiv expr

State 16:
## Known stack suffix:
## Lopar expr Lcpar
## LR(1) items:
expr -> Lopar expr Lcpar . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
## Reductions:
-- On Lsub Lsc Lmul Ldiv Lcpar Ladd
--   reduce production expr -> Lopar expr Lcpar

State 17:
## Known stack suffix:
## expr Ladd
## LR(1) items:
expr -> expr Ladd . expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## expr Ladd expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr Ladd expr . [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Lcpar Ladd ]
## Transitions:
-- On Lmul shift to state 12
-- On Ldiv shift to state 14
## Reductions:
-- On Lsub Lsc Lcpar Ladd
--   reduce production expr -> expr Ladd expr

State 19:
## Known stack suffix:
## Lvar Lassign expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Ladd ]
instr -> Lvar Lassign expr . Lsc [ Lvar Lreturn Lend ]
## Transitions:
-- On Lsub shift to state 10
-- On Lsc shift to state 20
-- On Lmul shift to state 12
-- On Ldiv shift to state 14
-- On Ladd shift to state 17
## Reductions:

State 20:
## Known stack suffix:
## Lvar Lassign expr Lsc
## LR(1) items:
instr -> Lvar Lassign expr Lsc . [ Lvar Lreturn Lend ]
## Transitions:
## Reductions:
-- On Lvar Lreturn Lend
--   reduce production instr -> Lvar Lassign expr Lsc

State 21:
## Known stack suffix:
## Lreturn
## LR(1) items:
instr -> Lreturn . expr Lsc [ Lvar Lreturn Lend ]
## Transitions:
-- On Lvar shift to state 3
-- On Ltrue shift to state 4
-- On Lstring shift to state 5
-- On Lopar shift to state 6
-- On Lint shift to state 7
-- On Lfalse shift to state 8
-- On expr shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## Lreturn expr
## LR(1) items:
expr -> expr . Lmul expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Ladd expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Lsub expr [ Lsub Lsc Lmul Ldiv Ladd ]
expr -> expr . Ldiv expr [ Lsub Lsc Lmul Ldiv Ladd ]
instr -> Lreturn expr . Lsc [ Lvar Lreturn Lend ]
## Transitions:
-- On Lsub shift to state 10
-- On Lsc shift to state 23
-- On Lmul shift to state 12
-- On Ldiv shift to state 14
-- On Ladd shift to state 17
## Reductions:

State 23:
## Known stack suffix:
## Lreturn expr Lsc
## LR(1) items:
instr -> Lreturn expr Lsc . [ Lvar Lreturn Lend ]
## Transitions:
## Reductions:
-- On Lvar Lreturn Lend
--   reduce production instr -> Lreturn expr Lsc

State 24:
## Known stack suffix:
## Lend
## LR(1) items:
block -> Lend . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production block -> Lend

State 25:
## Known stack suffix:
## instr
## LR(1) items:
block -> instr . block [ # ]
## Transitions:
-- On Lvar shift to state 1
-- On Lreturn shift to state 21
-- On Lend shift to state 24
-- On instr shift to state 25
-- On block shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## instr block
## LR(1) items:
block -> instr block . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production block -> instr block

State 27:
## Known stack suffix:
## block
## LR(1) items:
block' -> block . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept block

